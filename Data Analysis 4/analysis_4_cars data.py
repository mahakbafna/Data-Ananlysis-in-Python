# -*- coding: utf-8 -*-
"""ANALYSIS_4_CARS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hTc-GDqOh4ev6sUkSfweHDSTGYV8AaPu

ANALYSIS 4
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
# imports
import numpy as np
import pandas as pd
pd.set_option('display.max_columns', 40)
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import seaborn as sns
# %matplotlib inline
sns.set_style('darkgrid')
import plotly.express as px
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore');

df = pd.read_csv("CARS.csv")

df.head(5)

df.tail(5)

"""Checking the types of data"""

df.dtypes

"""Dropping the duplicate rows"""

df.shape

duplicate_rows_df = df[df.duplicated()]
print("number of duplicate rows: ", duplicate_rows_df.shape)

"""Now let us remove the duplicate data because it's ok to remove them."""

df.count()      # Used to count the number of rows

df = df.drop_duplicates()
df.head(5)

df.count()

"""Dropping the missing or null values."""

print(df.isnull().sum())

df = df.dropna()    # Dropping the missing values.
df.count()

print(df.isnull().sum())   # After dropping the values

"""Converting the object values to integer type.

While having a look at the data, the MSRP was stored as an object type. This is a serious problem because it is impossible to plot those values on a graph because it is a primary requirement that during plotting a graph all the values must be of type integer data. The author has stored, the MSRP in a different format ($36, 000) so I had to remove the formatting and then convert them to an integer.
"""

# Removing the formatting
df['MSRP'] = [x.replace('$', '') for x in df['MSRP']] 
df['MSRP'] = [x.replace(',', '') for x in df['MSRP']]

df['MSRP']=pd.to_numeric(df['MSRP'],errors='coerce')

"""PLOTTING GRAPHS AND COMPARING THEM WITH THEIR ENGINE SIZE,PRICE,TYPE

Plotting different features against one another.

Histogram

Histogram refers to the frequency of occurrence of variables in an interval. Here, there are mainly 10 different car manufacturing companies, but it is often important to know who has the maximum number of cars. I'm just plotting histograms to find the total number of car manufacturers and this plot does not support my predictions or doesn't have relations with the price feature. Plotting a histogram is one of a trivial solution which lets us know the total number of different car manufacturers. From the histogram below it can be seen that Ford has almost several cars (20) followed by Chevrolet (19) and many more.
"""

# Plotting a Histogram
df.Make.value_counts().nlargest(40).plot(kind='bar', figsize=(10,5))
plt.title("Number of cars by make")
plt.ylabel('Number of cars')
plt.xlabel('Make');

"""Heat Maps

Heat Maps is a plot which is necessary when we need to find the dependent variables. One of the best ways to find the correlation between the features can be done using heat maps. As shown below the price feature (MSRP) has a strong correlation with Horsepower of 82% this is very important because the more the relationship between the variables the more accurate the model will be. This is how the correlation between the features can be found using heat maps. With the help of heat maps I can use these related features in building my model.
"""

# Plotting a heat map
plt.figure(figsize=(10,5))
c= df.corr()
sns.heatmap(c,cmap="BrBG",annot=True)

"""Scatterplot between two related varirables"""

plt.figure(figsize=(20,8))
sns.scatterplot(data=df, x='Horsepower', y='MSRP',hue='Type',palette='viridis',alpha=.89, s=200 );
plt.xticks(fontsize=13);
plt.yticks(fontsize=13)
plt.xlabel('Horsepower',fontsize=14)
plt.ylabel('MSRP',fontsize=20)
plt.title('Relation between Horsepower and MSRP',fontsize=20);

"""Horsepower of car seems to be highly related to car price.

Using more interactive plot to show the previous plot and also adding the car manufacturer
"""

fig = px.scatter_3d(df, x='Horsepower', z='MSRP', y='Make',color='Type',width=800,height=750)
fig.update_layout(showlegend=True)
fig.show();